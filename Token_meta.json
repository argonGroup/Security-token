{
	"compiler": { "version": "0.4.20+commit.3155dd80" },
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"constant": false,
				"inputs": [],
				"name": "freezeTransfers",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{ "name": "_spender", "type": "address" },
					{ "name": "_value", "type": "uint256" }
				],
				"name": "approve",
				"outputs": [{ "name": "success", "type": "bool" }],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "totalSupply",
				"outputs": [{ "name": "supply", "type": "uint256" }],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{ "name": "_from", "type": "address" },
					{ "name": "_to", "type": "address" },
					{ "name": "_value", "type": "uint256" }
				],
				"name": "transferFrom",
				"outputs": [{ "name": "success", "type": "bool" }],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [],
				"name": "unfreezeTransfers",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [{ "name": "_owner", "type": "address" }],
				"name": "balanceOf",
				"outputs": [{ "name": "balance", "type": "uint256" }],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{ "name": "_to", "type": "address" },
					{ "name": "_value", "type": "uint256" }
				],
				"name": "transfer",
				"outputs": [{ "name": "success", "type": "bool" }],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{ "name": "_owner", "type": "address" },
					{ "name": "_spender", "type": "address" }
				],
				"name": "allowance",
				"outputs": [{ "name": "remaining", "type": "uint256" }],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [{ "name": "_transferAuthorizer", "type": "address" }],
				"name": "setTransferAuthorizer",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{ "name": "_tokenIssuer", "type": "address" },
					{ "name": "_transferAuthorizer", "type": "address" }
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{ "anonymous": false, "inputs": [], "name": "Freeze", "type": "event" },
			{ "anonymous": false, "inputs": [], "name": "Unfreeze", "type": "event" },
			{
				"anonymous": false,
				"inputs": [
					{ "indexed": true, "name": "_from", "type": "address" },
					{ "indexed": true, "name": "_to", "type": "address" },
					{ "indexed": false, "name": "_value", "type": "uint256" }
				],
				"name": "Transfer",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{ "indexed": true, "name": "_owner", "type": "address" },
					{ "indexed": true, "name": "_spender", "type": "address" },
					{ "indexed": false, "name": "_value", "type": "uint256" }
				],
				"name": "Approval",
				"type": "event"
			}
		],
		"devdoc": {
			"methods": {
				"allowance(address,address)": {
					"params": {
						"_owner":
							"address to get number of tokens allowed to be transferred\r       from the owner of\r",
						"_spender":
							"address to get number of tokens allowed to be transferred\r       by the owner of\r"
					},
					"return":
						"number of tokens given spender is currently allowed to transfer\r        from given owner\r"
				},
				"approve(address,uint256)": {
					"params": {
						"_spender":
							"address to allow the owner of to transfer tokens from\r       message sender\r",
						"_value": "number of tokens to allow to transfer\r"
					},
					"return":
						"true if token transfer was successfully approved, false otherwise\r"
				},
				"balanceOf(address)": {
					"params": {
						"_owner":
							"address to get number of tokens currently belonging to the\r owner of\r"
					},
					"return":
						"number of tokens currently belonging to the owner of given address\r"
				},
				"setTransferAuthorizer(address)": {
					"params": { "_transferAuthorizer": "transfer authorizer to use" }
				},
				"totalSupply()": {
					"return": "total number of tokens in circulation\r"
				},
				"transfer(address,uint256)": {
					"params": {
						"_to": "address to transfer tokens to the owner of",
						"_value":
							"number of tokens to transfer to the owner of given address"
					},
					"return":
						"true if tokens were transferred successfully, false otherwise"
				},
				"transferFrom(address,address,uint256)": {
					"params": {
						"_from": "address to transfer tokens from the owner of",
						"_to": "address to transfer tokens to the owner of",
						"_value":
							"number of tokens to transfer from given owner to given recipient"
					},
					"return":
						"true if tokens were transferred successfully, false otherwise"
				}
			}
		},
		"userdoc": {
			"methods": {
				"allowance(address,address)": {
					"notice":
						"Tell how many tokens given spender is currently allowed to transfer from\r given owner.\r "
				},
				"approve(address,uint256)": {
					"notice":
						"Allow given spender to transfer given number of tokens from message sender.\r "
				},
				"balanceOf(address)": {
					"notice":
						"Get number of tokens currently belonging to given owner.\r "
				},
				"freezeTransfers()": { "notice": "Freeze token transfers." },
				"setTransferAuthorizer(address)": {
					"notice": "Set transfer authorizer to be used by smart contract."
				},
				"totalSupply()": {
					"notice": "Get total number of tokens in circulation.\r "
				},
				"transfer(address,uint256)": {
					"notice":
						"Transfer given number of tokens from message sender to given recipient."
				},
				"transferFrom(address,address,uint256)": {
					"notice":
						"Transfer given number of tokens from given owner to given recipient."
				},
				"unfreezeTransfers()": { "notice": "Unfreeze token transfers." }
			}
		}
	},
	"settings": {
		"compilationTarget": { "./src/sol/BCAPToken.sol": "BCAPToken" },
		"libraries": {},
		"optimizer": { "enabled": true, "runs": 200 },
		"remappings": []
	},
	"sources": {
		"./src/sol/AbstractToken.sol": {
			"keccak256":
				"0xee24c2379ce89da03e0c1af42ef54f06a9367b1557a6a904d0f0d2a95238de6e",
			"urls": [
				"bzzr://2a1ac563d5a25c8904f3986e77ff21174d9807245e3ef81ea4cdec1372a92564"
			]
		},
		"./src/sol/BCAPToken.sol": {
			"keccak256":
				"0x962ce6da8f1a2e774b8f28b30f24d95232954dadea2d21e9c3fc0a1e68240419",
			"urls": [
				"bzzr://c84d2fe5ea1cf6a528cd35fd08177d438a42fcfe95bbf73e982607e4fbe2d215"
			]
		},
		"./src/sol/SafeMath.sol": {
			"keccak256":
				"0xc0a0d4ffcac794dbc1b3a489d93fe019f4efec1e6008e46746ea67669d810fa6",
			"urls": [
				"bzzr://2c040d56a3194264731c8e92dfadb10c3f7fb6a19cb0a845dc244085c7172ae6"
			]
		},
		"./src/sol/StandardToken.sol": {
			"keccak256":
				"0x8c5229b449c05538aa535437473d76554c18762726cd7c50559f59cf6b84ae0e",
			"urls": [
				"bzzr://99131b2d03dd5f67f01a507914d702017487a021a0f7cee8e49574ad4df92a3f"
			]
		},
		"./src/sol/Token.sol": {
			"keccak256":
				"0xe6c55c08ade2d6c0ebc12c537d865b89a9830150410c608c3770ae3d638a6b16",
			"urls": [
				"bzzr://9040498ac381e9414dc4954998e107d9e17a2329b86275a204128b169e25ad74"
			]
		},
		"./src/sol/TransferAuthorizer.sol": {
			"keccak256":
				"0x621d84702958bacf519719666a0b57ff183276a4d01421f8bdbef9172b8e7723",
			"urls": [
				"bzzr://dfdeb2887fd9f897ea6856c4f0e9c14ffa9882b9388bcef63a91c0e336d68e15"
			]
		}
	},
	"version": 1
}
